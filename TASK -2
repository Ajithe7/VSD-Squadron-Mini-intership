Hereâ€™s the content formatted for GitHub with proper syntax highlighting and structure:

---

### File: **oddoreven.c**

```c
#include <stdio.h>

int main() {
    int num;
    printf("Enter a number: ");
    scanf("%d", &num);

    if (num % 2 == 0) {
        printf("The number %d is even.\n", num);
    } else {
        printf("The number %d is odd.\n", num);
    }

    return 0;
}
```

---

### File: **README.md**

```markdown
# Odd or Even Program with RISC-V Verification

This repository contains a simple C program to check whether a number is odd or even. It also includes instructions to compile and verify the program for both the host system and the RISC-V architecture using Spike.

---

## Instructions

### Step 1: Compile Using GCC

Compile the program `oddoreven.c` using GCC for the host system:

```bash
gcc oddoreven.c -o oddoreven
```

Run the compiled program to verify its functionality:

```bash
./oddoreven
```

### Step 2: Compile Using RISC-V GCC

Compile the program for the RISC-V architecture using the `riscv64-unknown-elf-gcc` cross-compiler:

```bash
riscv64-unknown-elf-gcc -O2 -mabi=lp64 -march=rv64i -o oddoreven.o oddoreven.c
```

#### Flags Explanation:
- `-O2`: Optimize the code for performance.
- `-mabi=lp64`: Use the LP64 ABI for 64-bit pointers and integers.
- `-march=rv64i`: Target the RISC-V 64-bit integer base architecture.
- `-o oddoreven.o`: Specify the output file.

### Step 3: Run with Spike

Verify the RISC-V binary using Spike, the RISC-V simulator:

```bash
spike pk oddoreven.o
```

#### Spike Components:
- `spike`: The RISC-V simulator.
- `pk`: Proxy kernel for executing the program.
- `oddoreven.o`: The compiled RISC-V executable.

---

## Example Output

For example, if you input `4`, the program will output:

```bash
Enter a number: 4
The number 4 is even.
```

Similarly, inputting `5` will produce:

```bash
Enter a number: 5
The number 5 is odd.
```

---

## Repository Setup

To add the files and commit changes to the repository, follow these steps:

```bash
git add oddoreven.c README.md
git commit -m "Add oddoreven program and verification guide"
git push origin main
```

---

## Conclusion

This guide ensures you can compile and test a basic C program for both native and RISC-V environments. The steps demonstrate the integration of the RISC-V toolchain and Spike simulator to verify program functionality.
```

---

This formatting is GitHub-compatible, with proper syntax highlighting for both code files and Markdown content. Let me know if you need further adjustments!
